/* 
 * Classes
 * 
 * Outline of key classes and their key interfaces.
 * Note that the 'Activity' class is part of the Android API, and represents an
 * activity in their app life cycle. The Sidebar is an integral part of the
 * program structure, not an Activity, so is not listed here.
 * Note also that, as internal and implementation-specific methods are not
 * listed here, neither will there be listed those methods of Activity that are
 * required to be overidden for the implementation to work.
 * ANOTHER NOTE: When an Activity calls another Activity in the Android API, it
 * does so using an 'Intent'. All parameters are also passed as members of this
 * Intent - hence the lack of methods specified in the Activity definitions
 * below about handling their construction. This will all be dealt with when
 * the required 'onCreate' methods of the Activities are implemented.
 */

 /*
  * Design decisions:
  * - Each key feature / screen of program is an Activity.
  * - Store key data in static, single instance objects in MainScreenActivity,
  *   to minimise fiddly data passing between activities and keep persistent
  *   data:
  *   > Places Database
  * - All measurements in metric.
  */




/*
 * Database of Places
 * All the places will be stored in here. This will be a single object in
 * MainScreenActivity, with various query functions that return PlaceData
 * objects.
 */
public class PlacesDatabase {
	/*
	 * Return list of all Places within the given locus (radius in km), in
	 * order of distance from centre.
	 */
	public List<PlaceData> getPlacesInLocus(double latitude, double longitude, double radius);

	/** Add other getters / setters as is deemed necessary later **/
}

/*
 * Place Data Object
 * Represents a single Place.
 * These are stored in the database!
 */
public class PlaceData {
	/*
	 * Permanent Data - stored forever
	 */
	private String name;
	private double latitude;
	private double longitude;
	private int rating;
	private boolean visited;
	private PlaceCategory category;
	private String description;
	private OpeningHours openinghours;
	// social addresses; e.g. twitter handle; to be added once planned

	/*
	 * Semi-Persistent Data - initially null, can be set, but may be wiped at
	 * any time in the future to conserve space
	 */
	private SOMEIMAGETYPE image;

	/*
	 * Session Data - initially takes a default / null value, which can be
	 * modified, but will be wiped between sessions.
	 */
	private boolean clicked;
	// social caching; to be added once planned

	/*
	 * Getters
	 */
	public String getName();
	public double getLatitude();
	public double getLongitude();
	public int getRating();
	public boolean getVisited();
	public PlaceCategory getCategory();
	public String getDescription();
	public OpeningHours getOpeningHours();
	// social address getters
	public SOMEIMAGETYPE getImage();
	public boolean getClicked();
	// social caching getters

	/*
	 * Updaters (or 'setters', but 'updaters' covers their intended use better)
	 */
	public void updateRating(int rating);
	public void updateVisited(boolean visited);
	public void updateClicked(boolean clicked);
}

/*
 * Local Time Datatype
 * Represents a date and time, in the 'local timezone' of the program, for use
 * with the OpeningHours class.
 */
public class LocalTime {
	/*
	 * Comparison Operators
	 */
	public boolean isBefore(LocalTime rhs);
	public boolean isEqualTo(LocalTime rhs);
}

/*
 * Opening Hours Datatype
 * Represents the times something is open / closed.
 * Should be able to handle varying days on which a place is open / closed, as
 * well as times. Public accessors are designed to be generic in this respect.
 */
public class OpeningHours {
	/*
	 * Return if the thing is open at give time and date.
	 */
	public boolean isOpenAt(LocalTime date);

	/*
	 * Return the time and date at which the thing next transitions to being
	 * open / closed after the given time and date.
	 */
	public LocalTime nextOpen(LocalTime date);
	public LocalTime nextClosed(LocalTime date);

	/*
	 * Return a summary of the opening times as a human-readable String.
	 */
	public String getOpeningSummary();
}

/*
 * Main Screen Activity
 * This is the central screen in the program, where the AR View and such like
 * is handled.
 */
public class MainScreenActivity extends Activity {
	/*
	 * Single objects and accessors
	 */
	private static PlacesDatabase placesdatabase;
	public static PlacesDatabase getPlacesDatabase();

	/*
	 * Screen components the activity owns
	 */
	private RadarComponent radar;
	private RangeSliderComponent distanceslider;
	// Also BeyondAR stuff

	/*
	 * Update viewing range (called back from the RangeSliderComponent)
	 */
	public void updateViewRange(double viewRange);
}

/*
 * Radar Component for Main Screen
 */
public class RadarComponent {
	/*
	 * Constructor
	 */
	public RadarComponent(MainScreenActivity owner);

	/*
	 * Update the state of the radar display
	 */
	public void updateState(double centreX, double centreY, double viewRange, ...);
}

/*
 * Range Slider Component for Main Screen
 */
public class RangeSliderComponent {
	/*
	 * Constructor
	 */
	public RangeSliderComponent(MainScreenActivity owner);
}

/*
 * Place Full Information Activity
 * The full place information screen thingy. Note: by making it an activity, I
 * am asserting it will be its own fullscreen thing. I think this makes the
 * most sense in terms of app structure.
 * I'll leave all of its internal stuff up to the implementer, including all
 * the necessary subclasses.
 */
public class PlaceFullInfoActivity extends Activity {
	/*
	 * Intent Constants
	 */
	public final static String EXTRA_PLACE = "uk.ac.ox.cs.GPT9.augox.PLACE";
	public final static String EXTRA_BACKGROUND = "uk.ac.ox.cs.GPT9.augox.BACKGROUND";
}

/*
 * Settings Panel Activity
 * Where the settings are handled. This activity will manipulate the global
 * settings singleton object.
 */
public class SettingsPanelActivity extends Activity {
}

/*
 * Filter Panel Activity
 * Sets filter settings for AR View. These will be stored in the global
 * settings singleton object.
 */
public class FilterPanelActivity extends Activity {
}

/*
 * List Places Activity
 * List the places closest to the given latitude / longitude.
 */
public class ListPlacesActivity extends Activity {
	/*
	 * Intent Constants
	 */
	public final static String EXTRA_LATITUDE = "uk.ac.ox.cs.GPT9.augox.LATITUDE";
	public final static String EXTRA_LONGITUDE = "uk.ac.ox.cs.GPT9.augox.LONGITUDE";
}

/*
 * Route Planner Activity
 * Route the plans!
 * Note that initial setup information will be passed to the required
 * 'onCreate' method in an Intent by the calling Activity, as this Activity can
 * be called by the Full Info Screen, Auto Planner, or via the the Sidebar.
 */
public class RoutePlannerActivity extends Activity {
	/*
	 * Intent Constants
	 */
	public final static String EXTRA_PLACELIST = "uk.ac.ox.cs.GPT9.augox.PLACELIST";
}

/* Auto Planner Activity
 * Auto the plan routes plans auto routes words typing!
 */
public class AutoPlannerActivity extends Activity {
}